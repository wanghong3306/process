#!/usr/bin/env php
<?php

define('ROOT', realpath(__DIR__ . '/..'));
$opt = getopt('v::');

chdir(ROOT);
exec('composer install --no-dev');

$pharName = "main.phar";
$pharFile = ROOT . '/' . $pharName;

if (file_exists($pharFile)) {
    unlink($pharFile);
}

$phar = new Phar($pharFile, 0, $pharName);
$phar->setSignatureAlgorithm(Phar::SHA1);

$phar->startBuffering();

$iterator = new RecursiveDirectoryIterator(ROOT, FilesystemIterator::SKIP_DOTS);
$iterator = new RecursiveCallbackFilterIterator($iterator, function (SplFileInfo $fileInfo) {
    return !in_array($fileInfo->getBasename(), ['.git', 'Tests', 'test', 'env.example.php'], true);
});
$iterator = new RecursiveIteratorIterator($iterator);
$iterator = new CallbackFilterIterator($iterator, function (SplFileInfo $fileInfo) {
   return in_array($fileInfo->getExtension(), ['php', 'exe'], true);
});

foreach ($iterator as $fileInfo) {
    $file = str_replace(ROOT, '', $fileInfo->getRealPath());
    echo "Add file: " . $file . "\n";
    $phar->addFile($fileInfo->getRealPath(), $file);
}
$content = file_get_contents(ROOT . '/bin/main');
$content = str_replace("#!/usr/bin/env php\n", '', $content);
$content = str_replace('__FILE__', 'str_replace("phar://", "", Phar::running())', $content);
$phar->addFromString('bin/main', $content);

$stub = <<<STUB
#!/usr/bin/env php
<?php
Phar::mapPhar('{$pharName}');
require 'phar://{$pharName}/bin/main';
__HALT_COMPILER();
STUB;

$phar->setStub($stub);
$phar->compressFiles(Phar::GZ);
$phar->stopBuffering();
unset($phar);

echo "$pharName was created successfully.\n";
